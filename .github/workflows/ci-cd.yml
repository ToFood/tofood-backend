name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - "*"

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  DB_MONGO_HOST: ${{ vars.DB_MONGO_HOST }}
  DB_MONGO_NAME: ${{ vars.DB_MONGO_NAME }}
  DB_MONGO_USER: ${{ vars.DB_MONGO_USER }}
  DB_MONGO_PASSWORD: ${{ secrets.DB_MONGO_PASSWORD }}
  DOCKER_REGISTRY: "docker.io"
  DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  IMAGE_NAME: "tofood-backend"
  CLUSTER_NAME: "tofood-eks-cluster"
  DEPLOYMENT_NAME: "tofood-deployment"
  NODEGROUP_NAME: "tofood-nodegroup"

jobs:
  # Job de Build do Projeto Node/TypeScript
  build_project:
    name: üõ†Ô∏è Build do Projeto
    runs-on: ubuntu-latest

    steps:
      - name: üé® Checkout do reposit√≥rio
        uses: actions/checkout@v4

      - name: üì¶ Instalar depend√™ncias
        run: npm install

      - name: üõ†Ô∏è Build do projeto
        run: npm run build

  # Job de Teste
  test:
    name: üß™ Testes da Aplica√ß√£o
    runs-on: ubuntu-latest
    needs: build_project

    steps:
      - name: üé® Checkout do reposit√≥rio
        uses: actions/checkout@v4

      - name: üì¶ Instalar depend√™ncias
        run: npm install

      - name: üß™ Executar Testes
        #run: npm test
        run: npm test -- src/tests/UserTest.ts

  # Job de Lint
  lint:
    name: üé® Lint - Valida√ß√£o do C√≥digo
    runs-on: ubuntu-latest
    needs: build_project

    steps:
      - name: üé® Checkout do reposit√≥rio
        uses: actions/checkout@v4

      - name: üì¶ Instalar depend√™ncias
        run: npm install

      - name: üîç Rodar Lint
        run: npm run lint

  # Teste de Conex√£o com AWS
  aws_test_connection:
    name: üì¶ Teste de Conex√£o com AWS
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: üé® Fazer checkout do reposit√≥rio
        uses: actions/checkout@v4

      - name: üöÄ Instalar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      - name: üìÉ Instalar depend√™ncias
        run: npm install aws-sdk

      - name: üì¶ Testar conex√£o com a AWS
        run: |
          node -e "
          const AWS = require('aws-sdk');
          AWS.config.update({
            region: process.env.AWS_REGION,
            accessKeyId: process.env.AWS_ACCESS_KEY_ID,
            secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
          });
          async function testConnection() {
            try {
              const s3 = new AWS.S3();
              const result = await s3.listBuckets().promise();
              console.log('‚ú® Conex√£o bem-sucedida com a AWS! Buckets:', result.Buckets.map(bucket => bucket.Name).join(', '));
            } catch (error) {
              console.error('‚ùå Falha ao conectar √† AWS:', error.message);
              process.exit(1);
            }
          }
          testConnection();
          "

  # Teste de Conex√£o com MongoDB
  mongodb_test:
    name: üóÑÔ∏è Teste de Conex√£o com MongoDB
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
      - name: üé® Fazer checkout do reposit√≥rio
        uses: actions/checkout@v4
      - name: üöÄ Instalar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"
      - name: üì¶ Instalar depend√™ncias
        run: npm install mongodb
      - name: Testar conex√£o com o MongoDB
        run: |
          node -e "
          const { MongoClient } = require('mongodb');
          const uri = 'mongodb+srv://' + process.env.DB_MONGO_USER + ':' + process.env.DB_MONGO_PASSWORD + '@' + process.env.DB_MONGO_HOST + '/' + process.env.DB_MONGO_NAME + '?retryWrites=true&w=majority';
          console.log('üîç Tentando conex√£o com a URI:', uri.replace(process.env.DB_MONGO_PASSWORD, '****'));
          const client = new MongoClient(uri, { useUnifiedTopology: true });
          async function run() {
            try {
              await client.connect();
              console.log('‚ú® Conex√£o bem-sucedida com o MongoDB!');
            } catch (error) {
              console.error('‚ùå Falha ao conectar ao MongoDB:', error.message);
              process.exit(1);
            } finally {
              await client.close();
            }
          }
          run();
          "

  # Teste de Build da Imagem Docker
  docker_build_test:
    name: üêã Teste de Build da Imagem Docker
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    steps:
      - name: üé® Fazer checkout do reposit√≥rio
        uses: actions/checkout@v4
      - name: üêã Login no Docker Hub
        run: |
          echo "$DOCKER_PASSWORD" | docker login $DOCKER_REGISTRY -u "$DOCKER_USERNAME" --password-stdin
      - name: üõ†Ô∏è Build da imagem Docker
        run: |
          docker build -t $DOCKER_REGISTRY/$IMAGE_NAME:latest .
      - name: üè∑Ô∏è Tag da imagem
        run: |
          docker tag $DOCKER_REGISTRY/$IMAGE_NAME:latest $DOCKER_REGISTRY/$IMAGE_NAME:${{ github.sha }}
      - name: ‚úÖ Logout do Docker
        run: docker logout $DOCKER_REGISTRY

  # Job para mensagem de PR sucesso
  pr_status:
    name: ‚úÖ Tudo certo!
    runs-on: ubuntu-latest
    needs: [mongodb_test, docker_build_test]
    if: github.event_name == 'pull_request'

    steps:
      - name: Aprova√ß√£o do PR
        run: |
          echo -e "Pipeline conclu√≠do, todos os testes passaram, mandou bem ${{ github.actor }}! ü¶æ \nPR aprovado ‚úÖ."

  # Job de Configura√ß√£o Inicial para Deploy (somente em merges para main)
  setup:
    name: üõú Estabelecendo conex√£o com AWS
    runs-on: ubuntu-latest
    needs: [test, lint, aws_test_connection]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: üé® Checkout do reposit√≥rio
        uses: actions/checkout@v4

      - name: üîê Configurar credenciais da AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

    # Job de Infraestrutura EKS para Deploy
  eks_infrastructure:
    name: üèóÔ∏è Provisionando EKS
    runs-on: ubuntu-latest
    needs: setup
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Verificar se o cluster EKS existe
        run: |
          aws eks describe-cluster --name $CLUSTER_NAME --region $AWS_REGION || \
          aws eks create-cluster --name $CLUSTER_NAME --region $AWS_REGION \
            --role-arn arn:aws:iam::$AWS_ACCOUNT_ID:role/EKSClusterRole \
            --resources-vpc-config subnetIds=subnet-xxxxxxx,subnet-yyyyyyy,securityGroupIds=sg-zzzzzzz

      - name: Aguardar o cluster EKS ficar ativo
        run: |
          aws eks wait cluster-active --name $CLUSTER_NAME --region $AWS_REGION

      - name: Criar Node Group para o cluster (se n√£o existir)
        run: |
          aws eks describe-nodegroup --cluster-name $CLUSTER_NAME --nodegroup-name $NODEGROUP_NAME --region $AWS_REGION || \
          aws eks create-nodegroup --cluster-name $CLUSTER_NAME --nodegroup-name $NODEGROUP_NAME \
            --subnets subnet-xxxxxxx subnet-yyyyyyy \
            --node-role arn:aws:iam::$AWS_ACCOUNT_ID:role/EKSNodeRole \
            --scaling-config minSize=1,maxSize=3,desiredSize=2 \
            --instance-types t3.medium \
            --ami-type AL2_x86_64

      - name: Aguardar Node Group ficar ativo
        run: |
          aws eks wait nodegroup-active --cluster-name $CLUSTER_NAME --nodegroup-name $NODEGROUP_NAME --region $AWS_REGION

      - name: Configurar o kubectl
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME

  # Job de Configura√ß√£o do ECR para Deploy
  ecr_setup:
    name: ü§ñ Provisionando ECR
    runs-on: ubuntu-latest
    needs: setup
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Verificar e Criar Reposit√≥rio ECR (se necess√°rio)
        run: |
          aws ecr describe-repositories --repository-names "$IMAGE_NAME" --region $AWS_REGION || \
          aws ecr create-repository --repository-name "$IMAGE_NAME" --region $AWS_REGION

  # Job de Build e Push da Imagem Docker
  docker_build_push:
    name: üêã Docker - Build & Push
    runs-on: ubuntu-latest
    needs: [ecr_setup, eks_infrastructure]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      # Passo de checkout para clonar o reposit√≥rio
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      # Login no Amazon ECR (caso necess√°rio)
      - name: Login no Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      # Verificar e Criar Reposit√≥rio ECR, se necess√°rio
      - name: Verificar e Criar Reposit√≥rio ECR
        run: |
          aws ecr describe-repositories --repository-names "$IMAGE_NAME" --region $AWS_REGION || \
          aws ecr create-repository --repository-name "$IMAGE_NAME" --region $AWS_REGION

      # Constru√ß√£o da imagem Docker
      - name: üõ†Ô∏è Build da imagem Docker
        run: |
          docker build -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_NAME:latest .

      # Tag da imagem com o SHA do commit
      - name: üè∑Ô∏è Tag da imagem
        run: |
          docker tag $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_NAME:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_NAME:${{ github.sha }}

      # Push da imagem para o reposit√≥rio ECR
      - name: üì§ Push da imagem Docker
        run: |
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_NAME:latest
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_NAME:${{ github.sha }}

  # Job de Deploy no EKS
  eks_deploy:
    name: üöÄ Deploy
    runs-on: ubuntu-latest
    needs: [eks_infrastructure, docker_build_push]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: ‚öôÔ∏è Configurar kubectl
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME

      - name: üöÄ Atualizar deployment no EKS
        id: deploy
        run: |
          set -e
          kubectl set image deployment/$DEPLOYMENT_NAME tofood-container=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_NAME:latest || echo "rollback_needed=true" >> $GITHUB_ENV
          kubectl rollout status deployment/$DEPLOYMENT_NAME || echo "rollback_needed=true" >> $GITHUB_ENV

      - name: ‚ö†Ô∏è Rollback do deployment
        if: env.rollback_needed == 'true'
        run: |
          echo "Ocorreu algum erro ao tentar realizar o deploy na AWS, Restaurando a vers√£o anterior da imagem..."
          kubectl rollout undo deployment/$DEPLOYMENT_NAME

      - name: ‚úÖ Deployado
        if: env.rollback_needed != 'true'
        run: |
          echo "Deploy bem-sucedido!"
          # Obt√©m o hostname ou IP do LoadBalancer associado ao servi√ßo
          SERVICE_URL=$(kubectl get svc $DEPLOYMENT_NAME -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "URL de Produ√ß√£o: http://$SERVICE_URL"
          echo "Outras Informa√ß√µes Importantes:"
          kubectl get svc $DEPLOYMENT_NAME -o wide
          kubectl get nodes
