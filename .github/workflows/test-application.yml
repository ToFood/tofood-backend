name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - "*"

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
  DB_MONGO_HOST: ${{ vars.DB_MONGO_HOST }}
  DB_MONGO_NAME: ${{ vars.DB_MONGO_NAME }}
  DB_MONGO_USER: ${{ vars.DB_MONGO_USER }}
  DB_MONGO_PASSWORD: ${{ secrets.DB_MONGO_PASSWORD }}
  DOCKER_REGISTRY: "docker.io"
  DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  IMAGE_NAME: "tofood/backend"

jobs:
  # Job de Build do Projeto Node/TypeScript
  build_project:
    name: üõ†Ô∏è Build do Projeto
    runs-on: ubuntu-latest

    steps:
      - name: üé® Checkout do reposit√≥rio
        uses: actions/checkout@v4

      - name: üì¶ Instalar depend√™ncias
        run: npm install

      - name: üõ†Ô∏è Build do projeto
        run: npm run build

  # Job de Teste
  test:
    name: üß™ Testes da Aplica√ß√£o
    runs-on: ubuntu-latest
    needs: build_project # Executa ap√≥s o sucesso do build_project

    steps:
      - name: üé® Checkout do reposit√≥rio
        uses: actions/checkout@v4

      - name: üì¶ Instalar depend√™ncias
        run: npm install

      - name: üß™ Executar Testes
        run: npm test

  # Job de Lint
  lint:
    name: üé® Lint - Valida√ß√£o do C√≥digo
    runs-on: ubuntu-latest
    needs: build_project # Executa ap√≥s o sucesso do build_project

    steps:
      - name: üé® Checkout do reposit√≥rio
        uses: actions/checkout@v4

      - name: üì¶ Instalar depend√™ncias
        run: npm install

      - name: üîç Rodar Lint
        run: npm run lint

  # Job para Testar Conex√£o com AWS
  aws_test_connection:
    name: üîó Teste de Conex√£o com AWS
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
      - name: üé® Fazer checkout do reposit√≥rio
        uses: actions/checkout@v4

      - name: üöÄ Instalar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      - name: üì¶ Instalar depend√™ncias
        run: npm install aws-sdk

      - name: üîó Testar conex√£o com a AWS
        run: |
          node -e "
          const AWS = require('aws-sdk');
          AWS.config.update({
            region: process.env.AWS_REGION,
            accessKeyId: process.env.AWS_ACCESS_KEY_ID,
            secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
            sessionToken: process.env.AWS_SESSION_TOKEN
          });
          async function testConnection() {
            try {
              const s3 = new AWS.S3();
              const result = await s3.listBuckets().promise();
              console.log('‚ú® Conex√£o bem-sucedida com a AWS! Buckets:', result.Buckets.map(bucket => bucket.Name).join(', '));
            } catch (error) {
              console.error('‚ùå Falha ao conectar √† AWS:', error.message);
              process.exit(1);
            }
          }
          testConnection();
          "

  # Job para Testar Conex√£o com MongoDB
  mongodb_test:
    name: üóÑÔ∏è Teste de Conex√£o com MongoDB
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
      - name: üé® Fazer checkout do reposit√≥rio
        uses: actions/checkout@v4

      - name: üöÄ Instalar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      - name: üì¶ Instalar depend√™ncias
        run: npm install mongodb

      - name: Testar conex√£o com o MongoDB
        run: |
          node -e "
          const { MongoClient } = require('mongodb');
          const uri = 'mongodb+srv://' + process.env.DB_MONGO_USER + ':' + process.env.DB_MONGO_PASSWORD + '@' + process.env.DB_MONGO_HOST + '/' + process.env.DB_MONGO_NAME + '?retryWrites=true&w=majority';
          console.log('üîç Tentando conex√£o com a URI:', uri.replace(process.env.DB_MONGO_PASSWORD, '****'));
          const client = new MongoClient(uri, { useUnifiedTopology: true });
          async function run() {
            try {
              await client.connect();
              console.log('‚ú® Conex√£o bem-sucedida com o MongoDB!');
            } catch (error) {
              console.error('‚ùå Falha ao conectar ao MongoDB:', error.message);
              process.exit(1);
            } finally {
              await client.close();
            }
          }
          run();
          "

  # Job para Testar Build da Imagem Docker
  docker_build_test:
    name: üêã Teste de Build da Imagem Docker
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
      - name: üé® Fazer checkout do reposit√≥rio
        uses: actions/checkout@v4

      - name: üêã Login no Docker Hub
        run: |
          echo "$DOCKER_PASSWORD" | docker login $DOCKER_REGISTRY -u "$DOCKER_USERNAME" --password-stdin

      - name: üõ†Ô∏è Build da imagem Docker
        run: |
          docker build -t $DOCKER_REGISTRY/$IMAGE_NAME:latest .

      - name: üè∑Ô∏è Tag da imagem
        run: |
          docker tag $DOCKER_REGISTRY/$IMAGE_NAME:latest $DOCKER_REGISTRY/$IMAGE_NAME:${{ github.sha }}

      - name: ‚úÖ Logout do Docker
        run: docker logout $DOCKER_REGISTRY
